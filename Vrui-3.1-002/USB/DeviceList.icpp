/***********************************************************************
DeviceList - Class representing lists of USB devices resulting from
device enumeration.
Copyright (c) 2010-2013 Oliver Kreylos

This file is part of the USB Support Library (USB).

The USB Support Library is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

The USB Support Library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the USB Support Library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define USB_DEVICELIST_IMPLEMENTATION

#include <libusb-1.0/libusb.h>

namespace USB {

template <class DeviceMatcherParam>
inline
size_t
DeviceList::getNumDevices(
	const DeviceMatcherParam& deviceMatcher) const
	{
	size_t result=0;
	for(size_t i=0;i<numDevices;++i)
		{
		/* Get the device's descriptor: */
		libusb_device_descriptor descriptor;
		if(libusb_get_device_descriptor(deviceList[i],&descriptor)==0)
			{
			/* Check the device descriptor against the functor: */
			if(deviceMatcher(descriptor))
				{
				/* Found one! */
				++result;
				}
			}
		}
	return result;
	}

template <class DeviceMatcherParam>
inline
libusb_device*
DeviceList::getDevice(const DeviceMatcherParam& deviceMatcher,
	size_t index) const
	{
	libusb_device* result=0;
	for(size_t i=0;result==0&&i<numDevices;++i)
		{
		/* Get the device's descriptor: */
		libusb_device_descriptor descriptor;
		if(libusb_get_device_descriptor(deviceList[i],&descriptor)==0)
			{
			/* Check the device descriptor against the functor: */
			if(deviceMatcher(descriptor))
				{
				/* Found a match! */
				if(index>0) // Not the one
					--index;
				else // The one!
					result=deviceList[i];
				}
			}
		}
	return result;
	}

}
